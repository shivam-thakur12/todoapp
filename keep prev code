keep prev code
package main

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
)

type Todo struct {
	ID     int    `json:"id"`
	Title  string `json:"title"`
	Status string `json:"status"`
}

var todos []Todo
var newID int = 1

// w is used to construct the http response. r carries the http request information
func createTodo(w http.ResponseWriter, r *http.Request) {
	var todo Todo
	//json.NewDecoder(r.Body).Decode(&todo) creates a new JSON decoder and reads from request body
	// and tries to decodes the JSON data into the todo var. if error, displayed
	if err := json.NewDecoder(r.Body).Decode(&todo); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	todo.ID = newID
	newID++
	// new "todo" appended into the todo slice
	todos = append(todos, todo)
	//setting the http status code as 201 created
	w.WriteHeader(http.StatusCreated)
	// encode todo variable into json and write it into response body
	json.NewEncoder(w).Encode(todo)
}

func getTodos(w http.ResponseWriter, r *http.Request) {
	// sets Content-Type in the http response as application/json.
	//This tells the client that the response body will contain JSON data.
	w.Header().Set("Content-Type", "application/json")
	// encode todos slice into json and write into response body
	json.NewEncoder(w).Encode(todos)
}

func updateTodo(w http.ResponseWriter, r *http.Request) {
	//this func helps extract variables from url, for our case, id
	vars := mux.Vars(r)
	// converts id to int
	id, err := strconv.Atoi(vars["id"])
	// in case id is not a valid int
	if err != nil {
		http.Error(w, "Invalid ID", http.StatusBadRequest)
		return
	}
	//json.NewDecoder(r.Body).Decode(&todo) creates a new JSON decoder and reads from request body
	// and tries to decode the JSON data into the UpdatedTodo var. if error, displayed
	var updatedTodo Todo
	if err := json.NewDecoder(r.Body).Decode(&updatedTodo); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	// updating the todo who's id is called
	for i, todo := range todos {
		if todo.ID == id {
			todos[i].Title = updatedTodo.Title
			todos[i].Status = updatedTodo.Status
			json.NewEncoder(w).Encode(todos[i])
			return
		}
	}
	// incase the id is not present
	http.Error(w, "Todo not found", http.StatusNotFound)
}

func deleteTodo(w http.ResponseWriter, r *http.Request) {
	//get variable (id) from url
	vars := mux.Vars(r)
	id, err := strconv.Atoi(vars["id"])
	if err != nil {
		http.Error(w, "Invalid ID", http.StatusBadRequest)
		return
	}

	for i, todo := range todos {
		if todo.ID == id {
			//that id todo is removed by concatenating the slice before and after index i
			todos = append(todos[:i], todos[i+1:]...)
			w.WriteHeader(http.StatusNoContent)
			return
		}
	}
	http.Error(w, "Todo not found", http.StatusNotFound)
}

func main() {
	r := mux.NewRouter()
	r.HandleFunc("/todo", createTodo).Methods("POST")
	r.HandleFunc("/todo", getTodos).Methods("GET")
	r.HandleFunc("/todo/{id}", updateTodo).Methods("PATCH")
	r.HandleFunc("/todo/{id}", deleteTodo).Methods("DELETE")

	http.ListenAndServe(":8080", r)
}
